const fs = require('fs');

function checkDataConsistency() {
    console.log("üîç Ki·ªÉm tra d·ªØ li·ªáu...\n");
    
    let detailsData = [];
    let faqsData = [];
    
    // ƒê·ªçc file details.json
    try {
        if (fs.existsSync("details.json")) {
            detailsData = JSON.parse(fs.readFileSync("details.json", "utf-8"));
            console.log(`üìÑ details.json: ${detailsData.length} s·∫£n ph·∫©m`);
        } else {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y file details.json");
        }
    } catch (e) {
        console.error("‚ùå L·ªói ƒë·ªçc details.json:", e.message);
    }
    
    // ƒê·ªçc file product_and_faqs.json
    try {
        if (fs.existsSync("product_and_faqs.json")) {
            faqsData = JSON.parse(fs.readFileSync("product_and_faqs.json", "utf-8"));
            console.log(`üìÑ product_and_faqs.json: ${faqsData.length} s·∫£n ph·∫©m`);
        } else {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y file product_and_faqs.json");
        }
    } catch (e) {
        console.error("‚ùå L·ªói ƒë·ªçc product_and_faqs.json:", e.message);
    }
    
    console.log("\n" + "=".repeat(50));
    
    // Ki·ªÉm tra ID trong details.json
    if (detailsData.length > 0) {
        console.log("\nüî¢ Ki·ªÉm tra ID trong details.json:");
        const detailsIds = detailsData.map(item => item.id);
        const duplicateDetailsIds = detailsIds.filter((id, index) => detailsIds.indexOf(id) !== index);
        
        if (duplicateDetailsIds.length > 0) {
            console.log(`‚ùå C√≥ ${duplicateDetailsIds.length} ID tr√πng l·∫∑p:`, [...new Set(duplicateDetailsIds)]);
        } else {
            console.log("‚úÖ Kh√¥ng c√≥ ID tr√πng l·∫∑p");
        }
        
        // Ki·ªÉm tra ID c√≥ li√™n t·ª•c kh√¥ng
        const maxId = Math.max(...detailsIds);
        const expectedIds = Array.from({length: maxId}, (_, i) => i + 1);
        const missingIds = expectedIds.filter(id => !detailsIds.includes(id));
        
        if (missingIds.length > 0) {
            console.log(`‚ö†Ô∏è Thi·∫øu ${missingIds.length} ID:`, missingIds.slice(0, 10), missingIds.length > 10 ? '...' : '');
        } else {
            console.log("‚úÖ ID li√™n t·ª•c t·ª´ 1 ƒë·∫øn", maxId);
        }
    }
    
    // Ki·ªÉm tra ID trong product_and_faqs.json
    if (faqsData.length > 0) {
        console.log("\nüî¢ Ki·ªÉm tra ID trong product_and_faqs.json:");
        const faqsIds = faqsData.map(item => item.id);
        const duplicateFaqsIds = faqsIds.filter((id, index) => faqsIds.indexOf(id) !== index);
        
        if (duplicateFaqsIds.length > 0) {
            console.log(`‚ùå C√≥ ${duplicateFaqsIds.length} ID tr√πng l·∫∑p:`, [...new Set(duplicateFaqsIds)]);
        } else {
            console.log("‚úÖ Kh√¥ng c√≥ ID tr√πng l·∫∑p");
        }
        
        // Ki·ªÉm tra ID c√≥ li√™n t·ª•c kh√¥ng
        const maxId = Math.max(...faqsIds);
        const expectedIds = Array.from({length: maxId}, (_, i) => i + 1);
        const missingIds = expectedIds.filter(id => !faqsIds.includes(id));
        
        if (missingIds.length > 0) {
            console.log(`‚ö†Ô∏è Thi·∫øu ${missingIds.length} ID:`, missingIds.slice(0, 10), missingIds.length > 10 ? '...' : '');
        } else {
            console.log("‚úÖ ID li√™n t·ª•c t·ª´ 1 ƒë·∫øn", maxId);
        }
    }
    
    // So s√°nh title gi·ªØa hai file
    if (detailsData.length > 0 && faqsData.length > 0) {
        console.log("\nüìã So s√°nh title gi·ªØa hai file:");
        
        const detailsTitles = new Set(detailsData.map(item => item.title));
        const faqsTitles = new Set(faqsData.map(item => item.title));
        
        const commonTitles = [...detailsTitles].filter(title => faqsTitles.has(title));
        const onlyInDetails = [...detailsTitles].filter(title => !faqsTitles.has(title));
        const onlyInFaqs = [...faqsTitles].filter(title => !detailsTitles.has(title));
        
        console.log(`ü§ù Chung: ${commonTitles.length} s·∫£n ph·∫©m`);
        console.log(`üìÑ Ch·ªâ c√≥ trong details.json: ${onlyInDetails.length} s·∫£n ph·∫©m`);
        console.log(`‚ùì Ch·ªâ c√≥ trong product_and_faqs.json: ${onlyInFaqs.length} s·∫£n ph·∫©m`);
        
        if (onlyInDetails.length > 0) {
            console.log("\nüìÑ M·ªôt s·ªë s·∫£n ph·∫©m ch·ªâ c√≥ trong details.json:");
            onlyInDetails.slice(0, 10).forEach(title => console.log(`  - ${title.substring(0, 80)}...`));
        }
        
        if (onlyInFaqs.length > 0) {
            console.log("\n‚ùì M·ªôt s·ªë s·∫£n ph·∫©m ch·ªâ c√≥ trong product_and_faqs.json:");
            onlyInFaqs.slice(0, 10).forEach(title => console.log(`  - ${title.substring(0, 80)}...`));
        }
    }
    
    console.log("\n" + "=".repeat(50));
    console.log("‚ú® Ho√†n t·∫•t ki·ªÉm tra!");
}

checkDataConsistency();