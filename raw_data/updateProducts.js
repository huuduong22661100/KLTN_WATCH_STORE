import mongoose from 'mongoose';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// MongoDB connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/Watch_store';

// Product Schema
const productSchema = new mongoose.Schema({
  id: { type: Number, required: true, unique: true },
  title: { type: String, required: true, trim: true },
  description: [{
    name: { type: String },
    title: { type: String },
  }],
  images: {
    mainImg: {
      url: { type: String, required: true },
      alt_text: { type: String }
    },
    sliderImg: [{
      url: { type: String },
      alt_text: { type: String }
    }]
  },
  price: { type: Number, min: 0 },
  stock: { type: Number, required: true, min: 0, default: 0 },
  brand: { type: String },
  sku: { type: String },
  category_id: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }],
  tags: [{ type: String }],
  gender: { type: String, enum: ['Nam', 'N·ªØ'] },
  origin: { type: String, default: "Nh·∫≠t B·∫£n" },
  color_id: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Color' }],
  specifications: {
    weight: { type: String },
    movement: { type: String },
    size: { type: String },
    thickness: { type: String },
    band_variation: { type: String },
    glass_material: { type: String },
    water_resistance_level: { type: String },
    dial_shape: { type: String }
  },
}, { timestamps: true });

const Product = mongoose.model('Product', productSchema);

async function updateProducts() {
  try {
    // K·∫øt n·ªëi MongoDB
    console.log('üîå ƒêang k·∫øt n·ªëi t·ªõi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng!\n');

    // ƒê·ªçc d·ªØ li·ªáu t·ª´ file details.json
    const detailsPath = path.join(__dirname, 'details.json');
    const productsData = JSON.parse(fs.readFileSync(detailsPath, 'utf-8'));

    console.log(`üì¶ T√¨m th·∫•y ${productsData.length} s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t\n`);

    let successCount = 0;
    let failCount = 0;
    let notFoundCount = 0;

    // C·∫≠p nh·∫≠t t·ª´ng s·∫£n ph·∫©m
    for (const productData of productsData) {
      try {
        const { id, categories_id, color_id } = productData;

        // T√¨m s·∫£n ph·∫©m theo tr∆∞·ªùng id
        const product = await Product.findOne({ id: id });

        if (!product) {
          console.log(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ id: ${id}`);
          notFoundCount++;
          continue;
        }

        // Chuy·ªÉn ƒë·ªïi categories_id t·ª´ array of objects sang array of ObjectId
        const categoryObjectIds = categories_id.map(cat => new mongoose.Types.ObjectId(cat.$oid));
        
        // Chuy·ªÉn ƒë·ªïi color_id t·ª´ object sang ObjectId (l∆∞u d·∫°ng array)
        const colorObjectId = color_id ? [new mongoose.Types.ObjectId(color_id.$oid)] : [];

        // C·∫≠p nh·∫≠t s·∫£n ph·∫©m theo id
        await Product.updateOne(
          { id: id },
          {
            $set: {
              category_id: categoryObjectIds,
              color_id: colorObjectId
            }
          }
        );

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m id: ${id}`);
        console.log(`   - Title: ${product.title}`);
        console.log(`   - Categories: ${categoryObjectIds.length} category`);
        console.log(`   - Color: ${colorObjectId.length} color\n`);
        successCount++;

      } catch (error) {
        console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m id ${productData.id}:`, error.message);
        failCount++;
      }
    }

    // T·ªïng k·∫øt
    console.log('\n' + '='.repeat(50));
    console.log('üìä K·∫æT QU·∫¢ C·∫¨P NH·∫¨T:');
    console.log('='.repeat(50));
    console.log(`‚úÖ Th√†nh c√¥ng: ${successCount} s·∫£n ph·∫©m`);
    console.log(`‚ùå Th·∫•t b·∫°i: ${failCount} s·∫£n ph·∫©m`);
    console.log(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y: ${notFoundCount} s·∫£n ph·∫©m`);
    console.log(`üì¶ T·ªïng s·ªë: ${productsData.length} s·∫£n ph·∫©m`);
    console.log('='.repeat(50));

  } catch (error) {
    console.error('‚ùå L·ªói nghi√™m tr·ªçng:', error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi
    await mongoose.connection.close();
    console.log('\nüì¥ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
updateProducts();
