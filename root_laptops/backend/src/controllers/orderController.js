import Order from '../models/Order.js';
import OrderItem from '../models/OrderItem.js';
import Cart from '../models/Cart.js';
import CartItem from '../models/CartItem.js';
import Product from '../models/Product.js';


export const createOrder = async (req, res) => {
  try {
    const {
      shipping_name,
      shipping_phone,
      shipping_address,
      shipping_city,
      shipping_district,
      shipping_ward,
      payment_method,
      note
    } = req.body;
    const userId = req.user.id;

    
    if (!shipping_name || !shipping_phone || !shipping_address || !shipping_city || !shipping_district || !payment_method) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng.'
      });
    }

    
    const cart = await Cart.findOne({ user_id: userId });
    if (!cart) {
      return res.status(400).json({
        success: false,
        message: 'Gi·ªè h√†ng tr·ªëng.'
      });
    }

    
    const cartItems = await CartItem.find({ cart_id: cart._id }).populate('watch_id');
    
    if (cartItems.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Gi·ªè h√†ng tr·ªëng.'
      });
    }

    
    let subtotal = 0;
    const orderItems = [];
    
    for (const item of cartItems) {
      const product = item.watch_id; 
      if (!product) {
        return res.status(404).json({
          success: false,
          message: `S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.`
        });
      }

      if (product.stock < item.quantity) {
        return res.status(400).json({
          success: false,
          message: `S·∫£n ph·∫©m "${product.title}" kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho.`
        });
      }

      
      const actualPrice = product.sale_price 
        ? parseFloat(product.sale_price.toString()) 
        : parseFloat(product.price.toString());
      const itemSubtotal = actualPrice * item.quantity;
      subtotal += itemSubtotal;

      orderItems.push({
        product_id: product._id,
        product_name: product.title,
        product_image: product.images?.mainImg?.url || '',
        quantity: item.quantity,
        price: actualPrice,
        subtotal: itemSubtotal
      });
    }

    // T√≠nh discount v√† total
    const discount = 0; // TODO: Implement discount logic n·∫øu c√≥ voucher/coupon
    const shipping_fee = 0; // TODO: Implement shipping fee logic
    const total = subtotal - discount + shipping_fee;

    // T·∫°o order_number t·ª± ƒë·ªông
    const orderCount = await Order.countDocuments();
    const orderNumber = `ORD${String(orderCount + 1).padStart(6, '0')}`;

    // X√°c ƒë·ªãnh payment_status d·ª±a v√†o payment_method
    const paymentStatus = payment_method === 'cod' ? 'unpaid' : 'paid';

    // T·∫°o ƒë∆°n h√†ng v·ªõi 3 tr·∫°ng th√°i
    const order = new Order({
      order_number: orderNumber,
      user_id: userId,
      subtotal: subtotal,
      discount: discount,
      shipping_fee: shipping_fee,
      total: total,
      shipping_name,
      shipping_phone,
      shipping_address,
      shipping_district,
      shipping_city,
      payment_method,
      note: note || '',
      // ‚úÖ 3 tr·∫°ng th√°i m·ªõi
      payment_status: paymentStatus,
      order_status: 'pending',
      shipping_status: 'not_shipped',
      // Gi·ªØ status c≈© cho t∆∞∆°ng th√≠ch
      status: 'pending',
      // ‚úÖ Kh·ªüi t·∫°o l·ªãch s·ª≠
      status_history: [{
        status_type: 'order_status',
        old_value: null,
        new_value: 'pending',
        changed_by: userId,
        note: 'ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o'
      }]
    });

    await order.save();

    // T·∫°o order items
    const itemsToCreate = orderItems.map(item => ({
      ...item,
      order_id: order._id
    }));

    await OrderItem.insertMany(itemsToCreate);

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho
    for (const item of cartItems) {
      await Product.findByIdAndUpdate(
        item.watch_id._id,
        { $inc: { stock: -item.quantity } }
      );
    }

    // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
    await CartItem.deleteMany({ cart_id: cart._id });

    // L·∫•y order ƒë·∫ßy ƒë·ªß v·ªõi items
    const fetchedOrderItems = await OrderItem.find({ order_id: order._id });

    const orderResponse = {
      ...order.toObject(),
      items: fetchedOrderItems
    };

    console.log('‚úÖ Order created:', orderResponse);

    res.status(201).json({
      success: true,
      message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng',
      data: {
        order: orderResponse
      }
    });
  } catch (error) {
    console.error('Create order error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·∫°o ƒë∆°n h√†ng',
      error: error.message,
    });
  }
};

// L·∫•y ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
export const getUserOrders = async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;

    console.log('üì¶ Getting orders for user:', req.user.id);

    const orders = await Order.find({ user_id: req.user.id })
      .populate('user_id', 'name email phone')
      .limit(limit * 1)
      .skip((page - 1) * limit)
      .sort({ createdAt: -1 });

    const total = await Order.countDocuments({ user_id: req.user.id });

    console.log(`‚úÖ Found ${orders.length} orders for user`);

    res.json({
      success: true,
      data: {
        orders: orders,
        total: total,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng',
      error: error.message
    });
  }
};


export const getOrderById = async (req, res) => {
  try {
    const { id } = req.params;

    const order = await Order.findById(id)
      .populate('user_id', 'name email phone address');

    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    
    if (order.user_id._id.toString() !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
      });
    }

    
    const orderItems = await OrderItem.find({ order_id: id })
      .populate('product_id', 'name price images');

    res.json({
      success: true,
      data: {
        order: {
          ...order.toObject(),
          items: orderItems
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng',
      error: error.message
    });
  }
};


export const updatePaymentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { payment_status, note } = req.body;

    const validStatuses = ['unpaid', 'paid', 'refunded'];
    if (!validStatuses.includes(payment_status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá'
      });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    const oldStatus = order.payment_status;
    order.payment_status = payment_status;
    
    
    order.status_history.push({
      status_type: 'payment_status',
      old_value: oldStatus,
      new_value: payment_status,
      changed_by: req.user.id,
      note: note || `C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n: ${oldStatus} ‚Üí ${payment_status}`
    });

    await order.save();

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng',
      data: { order }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n',
      error: error.message
    });
  }
};


export const updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { order_status, note } = req.body;

    const validStatuses = ['pending', 'confirmed', 'processing', 'ready_to_ship', 'completed', 'cancelled'];
    if (!validStatuses.includes(order_status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá'
      });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    const oldStatus = order.order_status;
    order.order_status = order_status;
    
    
    order.status = order_status === 'ready_to_ship' ? 'confirmed' : order_status;
    
    
    order.status_history.push({
      status_type: 'order_status',
      old_value: oldStatus,
      new_value: order_status,
      changed_by: req.user.id,
      note: note || `Admin c·∫≠p nh·∫≠t: ${oldStatus} ‚Üí ${order_status}`
    });

    await order.save();

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng',
      data: { order }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng',
      error: error.message
    });
  }
};


export const updateShippingStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { shipping_status, shipping_info, note } = req.body;

    const validStatuses = ['not_shipped', 'picking', 'in_transit', 'out_for_delivery', 'delivered', 'failed_delivery', 'returning', 'returned'];
    if (!validStatuses.includes(shipping_status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i giao h√†ng kh√¥ng h·ª£p l·ªá'
      });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    const oldStatus = order.shipping_status;
    order.shipping_status = shipping_status;
    
    
    if (shipping_info) {
      order.shipping_info = { ...order.shipping_info, ...shipping_info };
    }

    
    if (shipping_status === 'delivered') {
      order.shipping_info.actual_delivery = new Date();
      order.order_status = 'completed';
      
      if (order.payment_method === 'cod') {
        order.payment_status = 'paid';
      }
    }
    
    
    order.status_history.push({
      status_type: 'shipping_status',
      old_value: oldStatus,
      new_value: shipping_status,
      changed_by: req.user.id,
      note: note || `C·∫≠p nh·∫≠t giao h√†ng: ${oldStatus} ‚Üí ${shipping_status}`
    });

    await order.save();

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i giao h√†ng th√†nh c√¥ng',
      data: { order }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i giao h√†ng',
      error: error.message
    });
  }
};


export const getAllOrders = async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 10, 
      paymentStatus, 
      orderStatus, 
      shippingStatus, 
      customerName, 
      date, 
      orderCode, 
      paymentMethod 
    } = req.query;

    const filter = {};

    
    if (paymentStatus) filter.payment_status = paymentStatus;
    
    
    if (orderStatus) filter.order_status = orderStatus;
    
    
    if (shippingStatus) filter.shipping_status = shippingStatus;
    
    
    if (paymentMethod) filter.payment_method = paymentMethod;

    
    if (customerName) {
      const users = await User.find({ name: { $regex: customerName, $options: 'i' } }).select('_id');
      const userIds = users.map(user => user._id);
      filter.user_id = { $in: userIds };
    }

    
    if (orderCode) {
      filter.$or = [
        { order_number: { $regex: orderCode, $options: 'i' } },
        { _id: orderCode } 
      ];
    }

    
    if (date) {
      const searchDate = new Date(date);
      searchDate.setHours(0, 0, 0, 0);
      const nextDay = new Date(searchDate);
      nextDay.setDate(searchDate.getDate() + 1);

      filter.createdAt = {
        $gte: searchDate,
        $lt: nextDay,
      };
    }

    const orders = await Order.find(filter)
      .populate('user_id', 'name email phone')
      .limit(limit * 1)
      .skip((page - 1) * limit)
      .sort({ createdAt: -1 });

    const total = await Order.countDocuments(filter);

    res.json({
      success: true,
      data: orders,
      total,
      page: parseInt(page),
      totalPages: Math.ceil(total / limit)
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng',
      error: error.message
    });
  }
};


export const cancelOrder = async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    
    if (order.user_id.toString() !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y'
      });
    }

    
    if (!['pending', 'confirmed'].includes(order.order_status)) {
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i hi·ªán t·∫°i'
      });
    }

    const oldOrderStatus = order.order_status;
    order.order_status = 'cancelled';
    order.status = 'cancelled'; 

    
    if (order.payment_status === 'paid' && order.payment_method !== 'cod') {
      order.payment_status = 'refunded';
    }

    
    order.status_history.push({
      status_type: 'order_status',
      old_value: oldOrderStatus,
      new_value: 'cancelled',
      changed_by: req.user.id,
      note: reason || `ƒê∆°n h√†ng b·ªã h·ªßy b·ªüi ${req.user.role === 'admin' ? 'Admin' : 'Kh√°ch h√†ng'}`
    });

    
    const orderItems = await OrderItem.find({ order_id: id });
    for (const item of orderItems) {
      await Product.findByIdAndUpdate(
        item.product_id,
        { $inc: { stock: item.quantity } }
      );
    }

    await order.save();

    res.json({
      success: true,
      message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng',
      data: { order }
    });
  } catch (error) {
    console.error('Cancel order error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi h·ªßy ƒë∆°n h√†ng',
      error: error.message
    });
  }
};
